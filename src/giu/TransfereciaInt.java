package giu;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.awt.HeadlessException;
import java.sql.CallableStatement;
import datos.DB_connection;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import oracle.jdbc.OracleTypes;

public class TransfereciaInt extends javax.swing.JInternalFrame {

    /**
     * Creates new form TransfereciaInt
     */
    public TransfereciaInt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LIMPIAR = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        Select = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Monto = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Hola = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ID = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        CCI = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        LIMPIAR.setText("Limpiar");
        LIMPIAR.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 255, 0)));
        LIMPIAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIMPIARActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel1.setText("Monto  S/");

        Select.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Select.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Item 2" }));
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel2.setText("Transferencia Interbancaria");

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel3.setText("Seleccione Cta. Origen");

        Monto.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jButton1.setBackground(new java.awt.Color(255, 204, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton1.setText("Confirmar Transferencia");
        jButton1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Hola.setFont(new java.awt.Font("Harlow Solid Italic", 0, 24)); // NOI18N
        Hola.setText("    ");

        jLabel5.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel5.setText("Ingres CCI");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("ID_CLIENTE");

        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        CCI.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        CCI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CCIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LIMPIAR, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CCI)
                    .addComponent(Select, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Monto))
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Hola, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jLabel4)
                    .addComponent(LIMPIAR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Hola)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CCI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Monto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LIMPIARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIMPIARActionPerformed
        ID.setText("");
        Monto.setText("");
        CCI.setText("");
        Select.removeAllItems();
        
    }//GEN-LAST:event_LIMPIARActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        cargarCuentasCliente(); // Llenar el JComboBox con las cuentas del cliente
    }//GEN-LAST:event_SelectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Connection conn = null;
        CallableStatement cs = null;
        CallableStatement csNombre = null;

        try {
            // Obtener cuenta seleccionada
            String cuentaSeleccionada = (String) Select.getSelectedItem();
            if (cuentaSeleccionada == null || Monto.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Seleccione una cuenta e ingrese un monto.", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Extraer ID de cuenta del JComboBox
            String idCuenta = cuentaSeleccionada.split(" - ")[1];
            double monto = Double.parseDouble(Monto.getText());

            // Conectar a la base de datos
            DB_connection db = new DB_connection();
            conn = db.conectar();

            // Llamar al procedimiento almacenado
            String sql = "{CALL ConfirmarRetiro(?, ?, ?)}";
            cs = conn.prepareCall(sql);

            cs.setString(1, idCuenta);
            cs.setDouble(2, monto);
            cs.registerOutParameter(3, java.sql.Types.VARCHAR); // Mensaje de salida

            cs.execute();

            // Mostrar mensaje
            String resultado = cs.getString(3);
            JOptionPane.showMessageDialog(this, resultado, "Resultado", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un monto válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (cs != null) cs.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.err.println(e);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Connection conn = null;
        CallableStatement cs = null;
        CallableStatement csNombre = null;

        try {
            // Conectar a la base de datos
            DB_connection db = new DB_connection();
            conn = db.conectar();

            // 📌 Llamar al procedimiento almacenado para buscar cliente
            String sql = "{CALL BuscarCliente(?, ?, ?, ?, ?, ?, ?, ?)}";
            cs = conn.prepareCall(sql);
            cs.setString(1, ID.getText()); // ID Cliente ingresado en JTextField

            // Parámetros de salida
            cs.registerOutParameter(2, java.sql.Types.VARCHAR); // DNI
            cs.registerOutParameter(3, java.sql.Types.VARCHAR); // Nombres
            cs.registerOutParameter(4, java.sql.Types.VARCHAR); // APaterno
            cs.registerOutParameter(5, java.sql.Types.VARCHAR); // AMaterno
            cs.registerOutParameter(6, java.sql.Types.VARCHAR); // Dirección
            cs.registerOutParameter(7, java.sql.Types.VARCHAR); // Teléfono
            cs.registerOutParameter(8, java.sql.Types.VARCHAR); // Email

            // Ejecutar el procedimiento
            cs.execute();

            // Obtener datos del cliente
            String dni = cs.getString(2);
            String nombres = cs.getString(3);
            String apPaterno = cs.getString(4);
            String apMaterno = cs.getString(5);
            String direccion = cs.getString(6);
            String telefono = cs.getString(7);
            String email = cs.getString(8);

            // 📌 Verificar si el cliente existe
            if (dni != null) {
                // Llamar al procedimiento almacenado para obtener el nombre del cliente
                String sqlNombre = "{CALL ObtenerNombreCliente(?, ?)}";
                csNombre = conn.prepareCall(sqlNombre);
                csNombre.setString(1, ID.getText().trim()); // Pasar ID cliente
                csNombre.registerOutParameter(2, java.sql.Types.VARCHAR);
                csNombre.execute();
                String nombreCliente = csNombre.getString(2);

                // Mostrar el nombre completo del cliente
                Hola.setText("Hola " + nombreCliente);
                Hola.setText("Hola " + nombreCliente);
                // Mostrar mensaje con los datos del cliente
                JOptionPane.showMessageDialog(this, "Cliente encontrado:\n" +
                    "DNI: " + dni + "\nNombre: " + nombres + " " + apPaterno + " " + apMaterno +
                    "\nDirección: " + direccion + "\nTeléfono: " + telefono + "\nEmail: " + email,
                    "Información del Cliente", JOptionPane.INFORMATION_MESSAGE);

                // 📌 Llamar a la función para cargar las cuentas del cliente en el JComboBox
                cargarCuentasCliente();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el cliente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (cs != null) cs.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.err.println(e);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void CCIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CCIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CCIActionPerformed

    private void cargarCuentasCliente() {
    Connection conn = null;
    CallableStatement cs = null;
    ResultSet rs = null;

    try {
        // Conectar a la base de datos
        DB_connection db = new DB_connection();
        conn = db.conectar();

        // Llamar al procedimiento almacenado
        String sql = "{CALL BuscarCuentasCliente(?, ?)}";
        cs = conn.prepareCall(sql);

        // Pasar el ID_cliente desde el JTextField
        cs.setString(1, ID.getText());
        cs.registerOutParameter(2, OracleTypes.CURSOR);

        cs.execute();

        // Obtener resultados
        rs = (ResultSet) cs.getObject(2);
        Select.removeAllItems(); // Limpiar opciones anteriores
        
        
        while (rs.next()) {
            String idCuenta = rs.getString(1);
            String numeroCuenta = rs.getString(2);
            Select.addItem(numeroCuenta + " - " + idCuenta);
           
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (cs != null) cs.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }
}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CCI;
    private javax.swing.JLabel Hola;
    private javax.swing.JTextField ID;
    private javax.swing.JToggleButton LIMPIAR;
    private javax.swing.JTextField Monto;
    private javax.swing.JComboBox<String> Select;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
